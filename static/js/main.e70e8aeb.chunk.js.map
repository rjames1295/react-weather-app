{"version":3,"sources":["store/StoreConstants.js","store/Reducers.js","store/Store.js","utils/_toast.js","utils/_geolocation.js","api_service/_axios.js","config/config.js","api_service/weather.js","utils/_helpers.js","components/shared/RecursiveData.js","components/landing_page/LandingPageContainer.js","store/Actions.js","pages/LandingPage.js","App.js","serviceWorker.js","index.js"],"names":["StoreConstants","combineReducers","currentUserGeolocation","state","action","type","SC","payload","store","applyMiddleware","thunk","logger","createStore","reducers","window","_toast","variant","msg","Array","isArray","key","singleErr","key_","toast","_getUserGeolocation","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","position","coords","currentUserPosition","lat","latitude","lng","longitude","err","console","error","_axios","axios","create","interceptors","request","use","config","message","response","weatherMapAPIKey","baseAPIURL","_weatherAPI","getCurrentWeatherByCityName","cityName","countryCode","get","getCurrentWeatherByCityId","cityId","getCurrentWeatherByGeolocation","camelCaseToNormalCase","str","replace","str2","toUpperCase","ExpandableProperty","open","props","expanded","style","cursor","textStyle","color","onClick","setState","this","title","children","length","React","Component","RecursiveData","className","property","propertyName","String","rootProperty","Object","values","map","index","getOwnPropertyNames","excludeBottomBorder","LandingPageContainer","currentWeatherInfo","componentDidMount","_fetchData","then","setCurrentUserGeolocation","data","catch","render","Fragment","connect","dispatch","unsetCurrentUserGeolocation","LandingPage","App","Boolean","location","hostname","match","ReactDOM","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e70e8aeb.chunk.js","sourcesContent":["export const StoreConstants = {\n    SET_CURRENT_USER_GEOLOCATION: \"SET_CURRENT_USER_GEOLOCATION\",\n    UNSET_CURRENT_USER_GEOLOCATION: \"UNSET_CURRENT_USER_GEOLOCATION\"\n}\n","import { combineReducers } from \"redux\"\nimport { StoreConstants as SC } from \"./StoreConstants\"\n\n/**\n * @param {object} state initial state\n * @param {object} action \n */\nconst _geolocationReducer = (state = {}, action) => {\n    switch (action.type) {\n        case(SC.SET_CURRENT_USER_GEOLOCATION):\n            return { ...state, ...action.payload }\n        case(SC.UNSET_CURRENT_USER_GEOLOCATION):\n            return { }\n        default:\n            return state\n    }\n}\n\nexport default combineReducers({\n    currentUserGeolocation: _geolocationReducer\n})\n","import { createStore, applyMiddleware } from \"redux\"\nimport thunk from \"redux-thunk\"\nimport logger from \"redux-logger\"\nimport reducers from \"./Reducers\"\n\nconst initialState = {}\n/**\n * Honestly don't know the config for redux\n * Will have to read documentation\n */\nconst store = applyMiddleware(thunk, logger)(createStore)(reducers, initialState)\n\n// So store is accessible via browser console\nwindow.store = store\n\nexport default store\n","import { toast } from \"react-toastify\"\n\n/**\n * @param {string} variant required enum [success, info, warning, error]\n * @param {string} msg messaged to be displayed inside toastr\n * @param {object} params additional parameters\n */\nconst _toast = (variant = \"info\", msg = \"\", params = {}) => {\n    if (Array.isArray(msg)) {\n        for (let key in msg) {\n            let singleErr = msg[key]\n            for (let key_ in singleErr) toast[variant](singleErr[key_])\n        }\n    } else {\n        toast[variant](msg)\n    }\n}\n\nexport { _toast }\n","/**\n * @returns {object} with fields {lat, lng}\n */\nconst _getUserGeolocation = () => {\n    return new Promise((resolve, reject) => {\n        if (navigator && navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(\n                position => {\n                    if (position.coords) {\n                        const currentUserPosition = {\n                            lat: position.coords.latitude,\n                            lng: position.coords.longitude\n                        }\n                        resolve(currentUserPosition)\n                    }\n                },\n                err => {\n                    console.error(err)\n                    reject(err)\n                }\n            )\n        } else {\n            reject(\"Your browser does not support geolocation\")\n        }\n    })\n}\n\n/**\n * @param {string} cityName name of city\n * @param {string} countryName name of country\n * @returns {}\n */\nconst _getUserGeolocationFromCity = (cityName, countryName) => {\n    return new Promise((resolve, reject) => {\n        resolve({})\n    })\n}\n\n/**\n * @param {number} zipCode zip code of area\n * @returns {}\n */\nconst _getUserGeolocationFromZipCode = zipCode => {\n    return new Promise((resolve, reject) => {\n        resolve({})\n    })\n}\n\nexport {\n    _getUserGeolocation,\n    _getUserGeolocationFromCity,\n    _getUserGeolocationFromZipCode\n}\n","/**\n * Global axios config to intercept requests/response\n * and show toastrs on error\n */\n\n\nimport axios from \"axios\"\nimport { _toast as toast } from \"../utils/_toast\"\n\n\nconst _axios = axios.create({})\n\n_axios.interceptors.request.use(\n    config => {\n        return config\n    },\n    err => {\n        toast(\"error\", err.message)\n        return Promise.reject(err)\n    }\n)\n\n_axios.interceptors.response.use(\n    response => {\n        return response\n    },\n    err => {\n        toast(\"error\", err.message)\n        return Promise.reject(err)\n    }\n)\n\nexport default _axios\n","const weatherMapAPIKey = '0d6abf43bc0129ed9be7251a7ba6c9df'\nconst baseAPIURL = 'https://api.openweathermap.org/'\n\n\nexport {\n    weatherMapAPIKey,\n    baseAPIURL\n}\n","/**\n * Weather API provided by\n * https://openweathermap.org/\n * \n * Sample endpoint:\n *      api.openweathermap.org/data/2.5/weather?q={city name},{country code}\n * \n * Every endpoint must include APPID param \n * @param {string} weatherMapAPIKey &APPID=weatherMapAPIKey\n * @param {string} units optional param. enum [metric, imperial] defaults to Kelvin\n */\n\nimport axios from \"./_axios\"\nimport {\n    weatherMapAPIKey,\n    baseAPIURL\n} from \"../config/config\"\n\nexport const _weatherAPI = {\n    /**\n     * @param {string} cityName\n     * @param {string} countryCode\n     */\n    getCurrentWeatherByCityName: (cityName, countryCode) => {\n        if (!countryCode) return axios.get(`${baseAPIURL}/data/2.5/weather?q=${cityName}&units=metric&APPID=${weatherMapAPIKey}`)\n\n        return axios.get(`${baseAPIURL}/data/2.5/weather?q=${cityName},${countryCode}&units=metric&APPID=${weatherMapAPIKey}`)\n    },\n    /**\n     * @param {number} cityId\n     */\n    getCurrentWeatherByCityId: (cityId) => {\n        return axios.get(`${baseAPIURL}/data/2.5/weather?id=${cityId}&units=metric&APPID=${weatherMapAPIKey}`)\n    },\n    /**\n     * @param {object} geolocation required fields {lat, lng}\n     */\n    getCurrentWeatherByGeolocation: (geolocation = {}) => {\n        return axios.get(`${baseAPIURL}/data/2.5/weather?lat=${geolocation.lat}&lon=${geolocation.lng}&units=metric&APPID=${weatherMapAPIKey}`)\n    },\n\n}\n","/**\n * Convert 'thisSentence' to 'This sentence'\n * @param {string} str camel cased string to convert in to normal case with spacing\n */\nconst camelCaseToNormalCase = str => {\n    return str.replace(/([A-Z])/g, \" $1\").replace(/^./, str2 => str2.toUpperCase())\n}\n\n/**\n * Convert 'This sentence' to 'thisSentence'\n * @param {string} str\n */\nconst stringToCamelCase = str => {\n    if (!str) return null\n    str = str.toLowerCase().replace(/(?:(^.)|([-_\\s]+.))/g, function(match) {\n        return match.charAt(match.length - 1).toUpperCase()\n    })\n    return str.charAt(0).toLowerCase() + str.substring(1)\n}\n\n/**\n * Search recursively through a list of objects for objects that match keyword\n * @param {array} obj original array to search through\n * @param {any} key keyword to search for\n * @param {array} list new list to append results that match the keyword\n * @returns {array}\n */\nconst objectFindRecursive = (obj, key, list) => {\n    //    key = stringToCamelCase(key);\n    if (!obj) return []\n    if (obj instanceof Array) {\n        for (let i in obj) {\n            list = list.concat(objectFindRecursive(obj[i], key, []))\n        }\n        return list\n    }\n    if (obj[key]) list.push(obj[key])\n\n    if (typeof obj == \"object\" && obj !== null) {\n        const children = Object.keys(obj)\n        if (children.length > 0) {\n            for (let i in children) {\n                list = list.concat(objectFindRecursive(obj[children[i]], key, []))\n            }\n        }\n    }\n    return list\n}\n\nexport { camelCaseToNormalCase, stringToCamelCase, objectFindRecursive }\n","/**\n * General purpose component for recursively displaying JSON data where keys and values are dynamic\n */\n\nimport React from \"react\"\nimport { camelCaseToNormalCase } from \"../../utils/_helpers\"\n\nclass ExpandableProperty extends React.Component {\n    state = {\n        open: !!this.props.expanded\n    }\n\n    render() {\n        return (\n            <>\n                <span\n                    style={{\n                        cursor: 'pointer',\n                        textStyle: 'underline',\n                        color: 'blue'\n                    }}\n                    onClick={() => {\n                        this.setState({ open: !this.state.open })\n                    }}\n                >\n                    {this.props.title}\n                    {this.state.open ? <span> v</span> : <span> ></span>}\n                </span>\n\n                {this.state.open ? this.props.children : null}\n                {this.props.children.length === 0 && this.state.open ? <i>Empty</i> : null}\n            </>\n        )\n    }\n}\n\nclass RecursiveData extends React.Component {\n    render() {\n        return (\n            <div className=\"text-left p-l-15\">\n                {this.props.property !== null ? (\n                    <>\n                        {typeof this.props.property === \"number\" ||\n                        typeof this.props.property === \"string\" ||\n                        typeof this.props.property === \"boolean\" ? (\n                            <>\n                                {\" \"}\n                                <b>{camelCaseToNormalCase(this.props.propertyName)}</b> : {String(this.props.property)}{\" \"}\n                            </>\n                        ) : (\n                            <>\n                                <ExpandableProperty\n                                    title={camelCaseToNormalCase(this.props.propertyName)}\n                                    expanded={this.props.rootProperty}\n                                >\n                                    {Object.values(this.props.property).map((property, index, { length }) => {\n                                        return (\n                                            <RecursiveData\n                                                key={index}\n                                                property={property}\n                                                propertyName={Object.getOwnPropertyNames(this.props.property)[index]}\n                                                excludeBottomBorder={index === length - 1}\n                                            />\n                                        )\n                                    })}\n                                </ExpandableProperty>\n                            </>\n                        )}\n                    </>\n                ) : (\n                    <>\n                        {\" \"}\n                        <b>{camelCaseToNormalCase(this.props.propertyName)}</b> : {String(this.props.property)}{\" \"}\n                    </>\n                )}\n            </div>\n        )\n    }\n}\n\nexport default RecursiveData\n","import React from \"react\"\nimport { _toast } from \"../../utils/_toast\"\nimport { _getUserGeolocation } from \"../../utils/_geolocation\"\nimport { _weatherAPI } from \"../../api_service/weather\"\nimport { _actionSetCurrentUserGeolocation, _actionUnsetCurrentUserGeolocation } from \"../../store/Actions\"\nimport { connect } from \"react-redux\"\n\nimport RecursiveData from \"../shared/RecursiveData\"\n\nconst mapStateToProps = state => ({\n    currentUserGeolocation: state.currentUserGeolocation\n})\n\nconst mapDispatchToProps = dispatch => ({\n    setCurrentUserGeolocation(data) {\n        dispatch(_actionSetCurrentUserGeolocation(data))\n    },\n    unsetCurrentUserGeolocation(data) {\n        dispatch(_actionUnsetCurrentUserGeolocation(data))\n    }\n})\n\nclass LandingPageContainer extends React.Component {\n    state = {\n        currentWeatherInfo: {}\n    }\n\n    componentDidMount = () => {\n        this._fetchData()\n    }\n\n    _fetchData = () => {\n        _getUserGeolocation()\n            .then(geolocation => {\n                if (geolocation) {\n                    this.props.setCurrentUserGeolocation(geolocation)\n                    _weatherAPI.getCurrentWeatherByGeolocation(geolocation).then(response => {\n                        // console.log(response)\n                        this.setState({\n                            currentWeatherInfo: response.data\n                        })\n                    })\n                } else {\n                    _toast(\"error\", \"Error retrieving current location\")\n                }\n            })\n            .catch(err => {\n                _toast(\"error\", err)\n            })\n    }\n\n    render = () => {\n        const { currentWeatherInfo } = this.state\n        return (\n            <React.Fragment>\n                <RecursiveData\n                    property={currentWeatherInfo}\n                    propertyName=\"Weather info\"\n                    excludeBottomBorder={false}\n                    rootProperty={true}\n                />\n            </React.Fragment>\n        )\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LandingPageContainer)\n","import { StoreConstants as SC } from \"./StoreConstants\"\n\n/**\n * @param {object} payload required fields {lat, lng}\n * @returns {object} fields {type, payload}\n */\nconst _actionSetCurrentUserGeolocation = (payload) => {\n    return {\n        type: SC.SET_CURRENT_USER_GEOLOCATION,\n        payload: payload\n    }\n}\n\n/**\n * @returns {object} fields {type}\n */\nconst _actionUnsetCurrentUserGeolocation = () => {\n    return {\n        type: SC.UNSET_CURRENT_USER_GEOLOCATION,\n        payload: null\n    }\n}\n\n\nexport {\n    _actionSetCurrentUserGeolocation,\n    _actionUnsetCurrentUserGeolocation\n}","import React from \"react\"\n// import logo from \"../logo.svg\"\nimport LandingPageContainer from \"../components/landing_page/LandingPageContainer\"\n\n\nclass LandingPage extends React.Component {\n    state = {}\n\n    render = () => {\n        return (\n            <>\n                {/* <header className=\"App-header\">\n                    <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                    <p>\n                        Edit <code>src/App.js</code> and save to reload.\n                    </p>\n                    <a className=\"App-link\" href=\"https://reactjs.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n                        Learn React\n                    </a>\n                </header> */}\n                <LandingPageContainer />\n            </>\n        )\n    }\n}\n\nexport default LandingPage\n","import React from \"react\"\nimport \"./App.css\"\nimport LandingPage from \"./pages/LandingPage\"\nimport { ToastContainer } from \"react-toastify\"\n\n\nfunction App({ store }) {\n    return (\n        <div className=\"App\">\n            <ToastContainer />\n            <LandingPage store={store} />\n        </div>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { Provider } from \"react-redux\"\nimport store from \"./store/Store\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\nimport \"react-toastify/dist/ReactToastify.min.css\"\n\nReactDOM.render(\n    <Provider store={store}>\n        <App store={store} />\n    </Provider>,\n    document.getElementById(\"root\")\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}